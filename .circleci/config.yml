version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either fone of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
 aws-cli: circleci/aws-cli@2.0.3
# Define the jobs we want to run for this project
commands:
   # Exercise - Rollback
   destroy_environment:
     steps:
       - run:
           name: Destroy environment
           # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
           # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
           when: on_fail
           command: |
             aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}


jobs:
  create_infrastructure:   # Choose any name, such as `build`
      # The primary container, where your job's commands will run
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
                --region us-east-1

  create_cloudfront:   # Choose any name, such as `build`
      # The primary container, where your job's commands will run
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create Cloudformation Stack
            command: |
                aws cloudformation deploy \
                --template-file cloudfront.yml \
                --stack-name production-distro \
                --parameter-overrides PipelineID="udacitycd" \
                --tags project=udapeople &

  create_and_deploy_front_end:
      # The primary container, where your job's commands will run
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Execute bucket.yml - Create Cloudformation Stack 
            command: |
              aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
        # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
        - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

# Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfiles.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfiles.txt 

# Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`. 
# Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

# Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environmvent variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfiles.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
# Exercise: Config and Deploymen
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["28:04:f7:b0:63:f9:0c:dd:fd:4e:48:20:bc:c2:b3:26"] 


        
      - run:
          name: Install dependencies
          command: |
             export ANSIBLE_HOST_KEY_CHECKING=False
             apk add --update ansible 
             python -m pip install awscli
             aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=*firstone*" \
              --output text >> inventory
      

      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory.txt main4.yml
  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      - destroy_environment
 
# Sequential workflowf
workflows:
  # Name the workflowld
  myWorkflow:
    jobs:
    #  - create_cloudfront
        - create_and_deploy_front_end
        - promote_to_production:
            requires: 
              - create_and_deploy_front_end
        - get_last_deployment_id
        - clean_up_old_front_end:
            requires:
              - get_last_deployment_id
              - promote_to_production
    #  - create_infrastructure
    #  - configure_infrastructure:
     #     requires:
     #       - create_infrastructure
     # - smoke_test:
      #    requires:
        #    - configure_infrastructure
         #   - create_infrastructure